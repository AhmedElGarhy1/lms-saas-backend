{
  "openapi": "3.0.0",
  "paths": {
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Signup successful",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Sign up a new user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Login user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/refresh-token": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Refresh JWT token",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/verify-email": {
      "post": {
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Verify email",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset link sent",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Request password reset",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "summary": "Reset password",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Logout user",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/setup": {
      "post": {
        "operationId": "AuthController_setup2FA",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFASetupDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA QR code and secret",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Setup 2FA (returns QR code)",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/enable": {
      "post": {
        "operationId": "AuthController_enable2FA",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFAVerifyDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA enabled",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Enable 2FA (verify code)",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/2fa/disable": {
      "post": {
        "operationId": "AuthController_disable2FA",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFAVerifyDto"
              },
              "examples": {
                "user": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA disabled",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disable 2FA (verify code)",
        "tags": [
          "auth"
        ]
      }
    },
    "/users/me": {
      "get": {
        "operationId": "UsersController_getProfile",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890abcdef12345678",
                    "username": "testuser",
                    "email": "test@example.com",
                    "createdAt": "2023-10-27T10:00:00.000Z",
                    "updatedAt": "2023-10-27T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "put": {
        "operationId": "UsersController_updateProfile",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              },
              "examples": {
                "user": {
                  "value": {
                    "username": "newusername",
                    "email": "newemail@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the current user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890abcdef12345678",
                    "username": "newusername",
                    "email": "newemail@example.com",
                    "createdAt": "2023-10-27T10:00:00.000Z",
                    "updatedAt": "2023-10-27T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/password": {
      "patch": {
        "operationId": "UsersController_changePassword",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              },
              "examples": {
                "user": {
                  "value": {
                    "currentPassword": "oldpassword",
                    "newPassword": "newpassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changes the current user password.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890abcdef12345678",
                    "username": "testuser",
                    "email": "test@example.com",
                    "createdAt": "2023-10-27T10:00:00.000Z",
                    "updatedAt": "2023-10-27T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UsersController_createUser",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              },
              "examples": {
                "user": {
                  "value": {
                    "username": "newadmin",
                    "email": "admin@example.com",
                    "password": "adminpassword"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a new user.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "1234567890abcdef12345679",
                    "username": "newadmin",
                    "email": "admin@example.com",
                    "createdAt": "2023-10-27T10:00:00.000Z",
                    "updatedAt": "2023-10-27T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UsersController_listUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "John",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "1234567890abcdef12345678"
                      },
                      "username": {
                        "type": "string",
                        "example": "testuser"
                      },
                      "email": {
                        "type": "string",
                        "example": "test@example.com"
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2023-10-27T10:00:00.000Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2023-10-27T10:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/centers": {
      "post": {
        "operationId": "CentersController_createCenter",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCenterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Center created"
          }
        },
        "summary": "Create a new center",
        "tags": [
          "Centers"
        ]
      },
      "get": {
        "operationId": "CentersController_listCentersForUser",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Center A",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of centers"
          }
        },
        "summary": "List centers for current user",
        "tags": [
          "Centers"
        ]
      }
    },
    "/centers/{id}": {
      "get": {
        "operationId": "CentersController_getCenterById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Center found"
          }
        },
        "summary": "Get center by ID",
        "tags": [
          "Centers"
        ]
      },
      "patch": {
        "operationId": "CentersController_updateCenter",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCenterDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Center updated"
          }
        },
        "summary": "Update a center",
        "tags": [
          "Centers"
        ]
      },
      "delete": {
        "operationId": "CentersController_softDeleteCenter",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Center soft deleted"
          }
        },
        "summary": "Soft delete a center",
        "tags": [
          "Centers"
        ]
      }
    },
    "/centers/{centerId}/members": {
      "post": {
        "operationId": "CentersController_addMember",
        "parameters": [
          {
            "name": "centerId",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member added"
          }
        },
        "summary": "Add a member to a center",
        "tags": [
          "Centers"
        ]
      },
      "get": {
        "operationId": "CentersController_listMembers",
        "parameters": [
          {
            "name": "centerId",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List members of a center",
        "tags": [
          "Centers"
        ]
      }
    },
    "/centers/{centerId}/members/{userId}": {
      "delete": {
        "operationId": "CentersController_removeMember",
        "parameters": [
          {
            "name": "centerId",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Member removed"
          }
        },
        "summary": "Remove a member from a center",
        "tags": [
          "Centers"
        ]
      }
    },
    "/centers/{centerId}/members/{userId}/role": {
      "patch": {
        "operationId": "CentersController_changeMemberRole",
        "parameters": [
          {
            "name": "centerId",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMemberRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member role changed"
          }
        },
        "summary": "Change a member's role in a center",
        "tags": [
          "Centers"
        ]
      }
    },
    "/centers/{centerId}/members/role/{role}": {
      "get": {
        "operationId": "CentersController_filterMembersByRole",
        "parameters": [
          {
            "name": "centerId",
            "required": true,
            "in": "path",
            "description": "Center ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": true,
            "in": "path",
            "description": "Role name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of members with given role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Filter members by role in a center",
        "tags": [
          "Centers"
        ]
      }
    },
    "/access-control/roles/global": {
      "post": {
        "operationId": "AccessControlController_createGlobalRole",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Global role created"
          }
        },
        "summary": "Create a global role",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/roles/internal": {
      "post": {
        "operationId": "AccessControlController_createInternalRole",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Internal role created"
          }
        },
        "summary": "Create an internal (center) role",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/permissions": {
      "post": {
        "operationId": "AccessControlController_createPermission",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission created"
          }
        },
        "summary": "Create a permission",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/assign-role": {
      "post": {
        "operationId": "AccessControlController_assignRole",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role assigned to user"
          }
        },
        "summary": "Assign a role to a user (context-aware)",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/assign-permission": {
      "post": {
        "operationId": "AccessControlController_assignUserPermission",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPermissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission assigned to user"
          }
        },
        "summary": "Assign a permission override to a user (context-aware)",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/assign-permission-to-role": {
      "post": {
        "operationId": "AccessControlController_assignPermissionToRole",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignPermissionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Permission assigned to role"
          }
        },
        "summary": "Assign a permission to a role",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/user/{userId}/roles": {
      "get": {
        "operationId": "AccessControlController_getUserRoles",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "User roles with scopes"
          }
        },
        "summary": "Get user roles with scopes",
        "tags": [
          "access-control"
        ]
      }
    },
    "/access-control/user/{userId}/permissions": {
      "get": {
        "operationId": "AccessControlController_getUserPermissions",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "User permissions (resolved + overrides)"
          }
        },
        "summary": "Get user permissions (resolved + overrides)",
        "tags": [
          "access-control"
        ]
      }
    },
    "/grade-levels": {
      "post": {
        "operationId": "GradeLevelsController_createGradeLevel",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGradeLevelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Grade level created"
          }
        },
        "summary": "Create a new grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "get": {
        "operationId": "GradeLevelsController_listGradeLevels",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "level",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Grade 1",
              "type": "string"
            }
          },
          {
            "name": "centerId",
            "required": false,
            "in": "query",
            "description": "Center ID to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of grade levels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GradeLevelDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List grade levels (global or by center)",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{id}": {
      "patch": {
        "operationId": "GradeLevelsController_updateGradeLevel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGradeLevelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Grade level updated"
          }
        },
        "summary": "Update a grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "delete": {
        "operationId": "GradeLevelsController_deleteGradeLevel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Grade level deleted"
          }
        },
        "summary": "Delete a grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "get": {
        "operationId": "GradeLevelsController_getGradeLevelById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Grade level found"
          }
        },
        "summary": "Get grade level by ID",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/students": {
      "post": {
        "operationId": "GradeLevelsController_assignStudent",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student assigned"
          }
        },
        "summary": "Assign a student to a grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "get": {
        "operationId": "GradeLevelsController_listStudents",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of students"
          }
        },
        "summary": "List students in a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/students/{studentId}": {
      "delete": {
        "operationId": "GradeLevelsController_unassignStudent",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "required": true,
            "in": "path",
            "description": "Student ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Student unassigned"
          }
        },
        "summary": "Unassign a student from a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/groups": {
      "post": {
        "operationId": "GradeLevelsController_assignGroup",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group assigned"
          }
        },
        "summary": "Assign a group to a grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "get": {
        "operationId": "GradeLevelsController_listGroups",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups"
          }
        },
        "summary": "List groups in a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/groups/{groupId}": {
      "delete": {
        "operationId": "GradeLevelsController_unassignGroup",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Group unassigned"
          }
        },
        "summary": "Unassign a group from a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/subjects": {
      "post": {
        "operationId": "GradeLevelsController_assignSubject",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignSubjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subject assigned"
          }
        },
        "summary": "Assign a subject to a grade level",
        "tags": [
          "Grade Levels"
        ]
      },
      "get": {
        "operationId": "GradeLevelsController_listSubjects",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subjects"
          }
        },
        "summary": "List subjects in a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/grade-levels/{gradeLevelId}/subjects/{subjectId}": {
      "delete": {
        "operationId": "GradeLevelsController_unassignSubject",
        "parameters": [
          {
            "name": "gradeLevelId",
            "required": true,
            "in": "path",
            "description": "Grade level ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Subject unassigned"
          }
        },
        "summary": "Unassign a subject from a grade level",
        "tags": [
          "Grade Levels"
        ]
      }
    },
    "/groups": {
      "post": {
        "operationId": "GroupsController_createGroup",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created"
          }
        },
        "summary": "Create a new group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "operationId": "GroupsController_listGroups",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Group A",
              "type": "string"
            }
          },
          {
            "name": "centerId",
            "required": false,
            "in": "query",
            "description": "Center ID to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gradeLevelId",
            "required": false,
            "in": "query",
            "description": "Grade level ID to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List groups (with optional filtering)",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{id}": {
      "patch": {
        "operationId": "GroupsController_updateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated"
          }
        },
        "summary": "Update a group",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "operationId": "GroupsController_deleteGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted"
          }
        },
        "summary": "Delete a group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "operationId": "GroupsController_getGroupById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Group found"
          }
        },
        "summary": "Get group by ID",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{groupId}/students": {
      "post": {
        "operationId": "GroupsController_assignStudent",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student assigned"
          }
        },
        "summary": "Assign a student to a group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "operationId": "GroupsController_listStudents",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of students"
          }
        },
        "summary": "List students in a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{groupId}/students/{studentId}": {
      "delete": {
        "operationId": "GroupsController_unassignStudent",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "required": true,
            "in": "path",
            "description": "Student ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Student unassigned"
          }
        },
        "summary": "Unassign a student from a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{groupId}/teachers": {
      "post": {
        "operationId": "GroupsController_assignTeacher",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTeacherDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Teacher assigned"
          }
        },
        "summary": "Assign a teacher to a group",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "operationId": "GroupsController_listTeachers",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teachers"
          }
        },
        "summary": "List teachers in a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/groups/{groupId}/teachers/{teacherId}": {
      "delete": {
        "operationId": "GroupsController_unassignTeacher",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "description": "Teacher ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher unassigned"
          }
        },
        "summary": "Unassign a teacher from a group",
        "tags": [
          "Groups"
        ]
      }
    },
    "/subjects": {
      "post": {
        "operationId": "SubjectsController_createSubject",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subject created"
          }
        },
        "summary": "Create a new subject",
        "tags": [
          "Subjects"
        ]
      },
      "get": {
        "operationId": "SubjectsController_listSubjects",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Math",
              "type": "string"
            }
          },
          {
            "name": "centerId",
            "required": false,
            "in": "query",
            "description": "Center ID to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gradeLevelId",
            "required": false,
            "in": "query",
            "description": "Grade level ID to filter by",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subjects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List subjects (with optional filtering)",
        "tags": [
          "Subjects"
        ]
      }
    },
    "/subjects/{id}": {
      "patch": {
        "operationId": "SubjectsController_updateSubject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subject updated"
          }
        },
        "summary": "Update a subject",
        "tags": [
          "Subjects"
        ]
      },
      "delete": {
        "operationId": "SubjectsController_deleteSubject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Subject deleted"
          }
        },
        "summary": "Delete a subject",
        "tags": [
          "Subjects"
        ]
      },
      "get": {
        "operationId": "SubjectsController_getSubjectById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Subject found"
          }
        },
        "summary": "Get subject by ID",
        "tags": [
          "Subjects"
        ]
      }
    },
    "/subjects/{subjectId}/teachers": {
      "post": {
        "operationId": "SubjectsController_assignTeacher",
        "parameters": [
          {
            "name": "subjectId",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTeacherDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Teacher assigned"
          }
        },
        "summary": "Assign a teacher to a subject",
        "tags": [
          "Subjects"
        ]
      },
      "get": {
        "operationId": "SubjectsController_listTeachers",
        "parameters": [
          {
            "name": "subjectId",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "List of teachers"
          }
        },
        "summary": "List teachers for a subject",
        "tags": [
          "Subjects"
        ]
      }
    },
    "/subjects/{subjectId}/teachers/{teacherId}": {
      "delete": {
        "operationId": "SubjectsController_unassignTeacher",
        "parameters": [
          {
            "name": "subjectId",
            "required": true,
            "in": "path",
            "description": "Subject ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": true,
            "in": "path",
            "description": "Teacher ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher unassigned"
          }
        },
        "summary": "Unassign a teacher from a subject",
        "tags": [
          "Subjects"
        ]
      }
    },
    "/teachers": {
      "post": {
        "description": "Creates a new teacher profile for an existing user. Only admins and center owners can create teacher profiles.",
        "operationId": "TeachersController_createTeacher",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Teacher profile data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeacherDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Teacher profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Teacher profile already exists for this user"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new teacher profile",
        "tags": [
          "Teachers"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of all teachers. Only admins and center owners can access this endpoint.",
        "operationId": "TeachersController_getAllTeachers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "John",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Teachers list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherListResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all teachers",
        "tags": [
          "Teachers"
        ]
      }
    },
    "/teachers/{id}": {
      "get": {
        "description": "Retrieves a teacher profile by its ID. Users can only access their own profile unless they are admins or center owners.",
        "operationId": "TeachersController_getTeacherById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Teacher profile ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Teacher not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get teacher profile by ID",
        "tags": [
          "Teachers"
        ]
      },
      "put": {
        "description": "Updates a teacher profile. Users can only update their own profile unless they are admins or center owners.",
        "operationId": "TeachersController_updateTeacher",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Teacher profile ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated teacher profile data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeacherDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Teacher profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Teacher not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update teacher profile",
        "tags": [
          "Teachers"
        ]
      },
      "delete": {
        "description": "Deletes a teacher profile. Only admins and center owners can delete teacher profiles.",
        "operationId": "TeachersController_deleteTeacher",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Teacher profile ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "204": {
            "description": "Teacher profile deleted successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Teacher not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete teacher profile",
        "tags": [
          "Teachers"
        ]
      }
    },
    "/teachers/user/{userId}": {
      "get": {
        "description": "Retrieves a teacher profile by user ID. Users can only access their own profile unless they are admins or center owners.",
        "operationId": "TeachersController_getTeacherByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Teacher profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Teacher not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get teacher profile by user ID",
        "tags": [
          "Teachers"
        ]
      }
    },
    "/teachers/{id}/views": {
      "post": {
        "description": "Increments the profile view counter for a teacher. This endpoint can be called by any authenticated user.",
        "operationId": "TeachersController_incrementProfileViews",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Teacher profile ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile views incremented successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Teacher not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Increment teacher profile views",
        "tags": [
          "Teachers"
        ]
      }
    },
    "/students": {
      "post": {
        "operationId": "StudentsController_create",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new student",
        "tags": [
          "students"
        ]
      },
      "get": {
        "operationId": "StudentsController_list",
        "parameters": [
          {
            "name": "centerId",
            "required": false,
            "in": "query",
            "description": "Filter by center ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "Filter by teacher ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "grade",
            "required": false,
            "in": "query",
            "description": "Filter by grade",
            "schema": {
              "type": "string",
              "enum": [
                "PRIMARY_1",
                "PRIMARY_2",
                "PRIMARY_3",
                "PRIMARY_4",
                "PRIMARY_5",
                "PRIMARY_6",
                "SECONDARY_1",
                "SECONDARY_2",
                "SECONDARY_3",
                "SECONDARY_4",
                "SECONDARY_5",
                "OTHER"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "John",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "students": [],
                    "total": 0,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List students (by center, teacher, or all)",
        "tags": [
          "students"
        ]
      }
    },
    "/students/{id}": {
      "get": {
        "operationId": "StudentsController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Student ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get student by ID",
        "tags": [
          "students"
        ]
      },
      "put": {
        "operationId": "StudentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Student ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update student by ID",
        "tags": [
          "students"
        ]
      },
      "delete": {
        "operationId": "StudentsController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Student ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "204": {
            "description": "Student deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete student by ID",
        "tags": [
          "students"
        ]
      }
    },
    "/schedules": {
      "post": {
        "operationId": "SchedulesController_create",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new class session",
        "tags": [
          "schedules"
        ]
      },
      "get": {
        "operationId": "SchedulesController_list",
        "parameters": [
          {
            "name": "teacherId",
            "required": false,
            "in": "query",
            "description": "Filter by teacher ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "centerId",
            "required": false,
            "in": "query",
            "description": "Filter by center ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Filter by group ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "subjectId",
            "required": false,
            "in": "query",
            "description": "Filter by subject ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Filter by start date (inclusive)",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "Filter by end date (inclusive)",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "startTime",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "teacherName",
            "required": false,
            "in": "query",
            "description": "Filter by teacher name (partial match)",
            "schema": {
              "example": "John",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "sessions": [],
                    "total": 0,
                    "page": 1,
                    "limit": 10
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "List class sessions (filterable)",
        "tags": [
          "schedules"
        ]
      }
    },
    "/schedules/{id}": {
      "get": {
        "operationId": "SchedulesController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get class session by ID",
        "tags": [
          "schedules"
        ]
      },
      "put": {
        "operationId": "SchedulesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update class session by ID",
        "tags": [
          "schedules"
        ]
      },
      "delete": {
        "operationId": "SchedulesController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Session ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "204": {
            "description": "Session deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete class session by ID",
        "tags": [
          "schedules"
        ]
      }
    },
    "/attendance/bulk-mark": {
      "post": {
        "operationId": "AttendanceController_bulkMark",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMarkAttendanceDto"
              },
              "examples": {
                "default": {
                  "value": {
                    "sessionId": "session-uuid",
                    "attendances": [
                      {
                        "studentId": "student-uuid",
                        "status": "PRESENT",
                        "note": "On time"
                      },
                      {
                        "studentId": "student-uuid2",
                        "status": "ABSENT"
                      }
                    ],
                    "markedById": "user-uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attendance marked",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "count": 2
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some students already have attendance marked for this session."
          },
          "403": {
            "description": "Insufficient permissions"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk mark attendance for a session",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendance/edit": {
      "patch": {
        "operationId": "AttendanceController_edit",
        "parameters": [
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAttendanceDto"
              },
              "examples": {
                "default": {
                  "value": {
                    "id": "attendance-uuid",
                    "status": "LATE",
                    "note": "Arrived 10 minutes late"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attendance updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "attendance-uuid",
                    "sessionId": "session-uuid",
                    "studentId": "student-uuid",
                    "status": "LATE",
                    "note": "Arrived 10 minutes late",
                    "markedById": "user-uuid",
                    "createdAt": "2024-07-18T10:00:00.000Z",
                    "updatedAt": "2024-07-18T10:10:00.000Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to update attendance."
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Attendance record not found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Edit an attendance record",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendance/fetch": {
      "get": {
        "operationId": "AttendanceController_fetch",
        "parameters": [
          {
            "name": "sessionId",
            "required": false,
            "in": "query",
            "description": "Class session ID",
            "schema": {
              "example": "session-uuid",
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "Student ID",
            "schema": {
              "example": "student-uuid",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Start date (ISO)",
            "schema": {
              "example": "2024-07-18",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "End date (ISO)",
            "schema": {
              "example": "2024-07-19",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Attendance status",
            "schema": {
              "example": "PRESENT",
              "type": "string",
              "enum": [
                "PRESENT",
                "ABSENT",
                "LATE",
                "EXCUSED"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "note",
            "required": false,
            "in": "query",
            "description": "Filter by note (partial match)",
            "schema": {
              "example": "late",
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "attendance-uuid",
                      "sessionId": "session-uuid",
                      "studentId": "student-uuid",
                      "status": "PRESENT",
                      "note": "On time",
                      "markedById": "user-uuid",
                      "createdAt": "2024-07-18T10:00:00.000Z",
                      "updatedAt": "2024-07-18T10:00:00.000Z"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "No attendance records found."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch attendance records",
        "tags": [
          "Attendance"
        ]
      }
    },
    "/attendance/report": {
      "get": {
        "operationId": "AttendanceController_report",
        "parameters": [
          {
            "name": "sessionId",
            "required": false,
            "in": "query",
            "description": "Class session ID",
            "schema": {
              "example": "session-uuid",
              "type": "string"
            }
          },
          {
            "name": "studentId",
            "required": false,
            "in": "query",
            "description": "Student ID",
            "schema": {
              "example": "student-uuid",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "Start date (ISO)",
            "schema": {
              "example": "2024-07-18",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "End date (ISO)",
            "schema": {
              "example": "2024-07-19",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Attendance status",
            "schema": {
              "example": "PRESENT",
              "type": "string",
              "enum": [
                "PRESENT",
                "ABSENT",
                "LATE",
                "EXCUSED"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Page size",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "note",
            "required": false,
            "in": "query",
            "description": "Filter by note (partial match)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-type",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL",
                "CENTER"
              ],
              "default": "GLOBAL",
              "example": "GLOBAL"
            },
            "description": "Scope type (GLOBAL or CENTER)"
          },
          {
            "in": "header",
            "required": false,
            "name": "x-scope-id",
            "schema": {
              "type": "string",
              "example": "center-uuid"
            },
            "description": "Scope ID (center UUID, required if x-scope-type is CENTER)"
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance report",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "status": "PRESENT",
                      "_count": {
                        "status": 10
                      }
                    },
                    {
                      "status": "ABSENT",
                      "_count": {
                        "status": 2
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "No attendance data found for report."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attendance report/analytics",
        "tags": [
          "Attendance"
        ]
      }
    }
  },
  "info": {
    "title": "LMS SaaS API",
    "description": "API documentation for the LMS SaaS platform.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (min 6 chars)",
            "example": "password123"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "example": "John Doe"
          }
        },
        "required": [
          "email",
          "password",
          "fullName"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "test@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123"
          },
          "code": {
            "type": "string",
            "description": "2FA code (if enabled)",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {}
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {}
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {}
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {}
      },
      "TwoFASetupDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User password for 2FA setup",
            "example": "password123"
          }
        },
        "required": [
          "password"
        ]
      },
      "TwoFAVerifyDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "2FA verification code",
            "example": "123456"
          }
        },
        "required": [
          "code"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "example": "Jane Doe"
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Current password",
            "example": "oldpassword"
          },
          "newPassword": {
            "type": "string",
            "description": "New password (min 6 chars)",
            "example": "newpassword123"
          }
        },
        "required": [
          "oldPassword",
          "newPassword"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "fullName": {
            "type": "string",
            "description": "Full name of the user",
            "example": "Jane Doe"
          },
          "password": {
            "type": "string",
            "description": "User password (optional for system-generated users)",
            "example": "password123"
          }
        },
        "required": [
          "email",
          "fullName"
        ]
      },
      "CreateCenterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Springfield High",
            "description": "Name of the center"
          },
          "description": {
            "type": "string",
            "example": "A public high school in Springfield"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "default": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCenterDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Springfield High"
          },
          "description": {
            "type": "string",
            "example": "A public high school in Springfield"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AddMemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "user-uuid",
            "description": "ID of the user to add"
          },
          "role": {
            "type": "string",
            "example": "Teacher",
            "description": "Role to assign to the user"
          }
        },
        "required": [
          "userId",
          "role"
        ]
      },
      "ChangeMemberRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "example": "Admin",
            "description": "New role to assign to the user"
          }
        },
        "required": [
          "role"
        ]
      },
      "MemberDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "user-uuid",
            "description": "User ID"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID"
          },
          "role": {
            "type": "string",
            "example": "Teacher",
            "description": "Role name"
          },
          "createdBy": {
            "type": "string",
            "example": "admin-uuid",
            "description": "ID of the user who added this member"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Date the member was added"
          },
          "user": {
            "type": "object",
            "description": "User object (if populated)",
            "example": {
              "id": "user-uuid",
              "name": "John Doe",
              "email": "john@example.com"
            }
          },
          "roleObj": {
            "type": "object",
            "description": "Role object (if populated)",
            "example": {
              "id": "role-uuid",
              "name": "Teacher",
              "scope": "CENTER"
            }
          }
        },
        "required": [
          "userId",
          "centerId",
          "role",
          "createdBy",
          "createdAt"
        ]
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Role name",
            "example": "Admin"
          },
          "scope": {
            "type": "string",
            "description": "Role scope (GLOBAL or CENTER)",
            "enum": [
              "GLOBAL",
              "CENTER"
            ],
            "example": "GLOBAL"
          },
          "centerId": {
            "type": "string",
            "description": "Center ID (required if scope is CENTER)",
            "example": "center123"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata for the role",
            "example": "{ \"color\": \"blue\" }"
          },
          "isPublic": {
            "type": "boolean",
            "description": "Is this role public?",
            "example": false
          }
        },
        "required": [
          "name",
          "scope"
        ]
      },
      "CreatePermissionDto": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Permission action (e.g., user:view, center:manage)",
            "example": "user:view"
          }
        },
        "required": [
          "action"
        ]
      },
      "AssignRoleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID",
            "example": "user123"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID",
            "example": "role123"
          },
          "scopeType": {
            "type": "string",
            "description": "Scope type (GLOBAL or CENTER)",
            "enum": [
              "GLOBAL",
              "CENTER"
            ],
            "example": "GLOBAL"
          },
          "scopeId": {
            "type": "string",
            "description": "Scope ID (centerId if CENTER, null if GLOBAL)",
            "example": "center123"
          }
        },
        "required": [
          "userId",
          "roleId",
          "scopeType"
        ]
      },
      "AssignPermissionDto": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string",
            "description": "Permission ID",
            "example": "perm123"
          },
          "userId": {
            "type": "string",
            "description": "User ID (for per-user override)",
            "example": "user123"
          },
          "roleId": {
            "type": "string",
            "description": "Role ID (for role assignment)",
            "example": "role123"
          },
          "scopeType": {
            "type": "string",
            "description": "Scope type (GLOBAL or CENTER)",
            "enum": [
              "GLOBAL",
              "CENTER"
            ],
            "example": "GLOBAL"
          },
          "scopeId": {
            "type": "string",
            "description": "Scope ID (centerId if CENTER, null if GLOBAL)",
            "example": "center123"
          }
        },
        "required": [
          "permissionId"
        ]
      },
      "CreateGradeLevelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Primary 6",
            "description": "Name of the grade level"
          },
          "description": {
            "type": "string",
            "example": "Final year of primary school"
          },
          "level": {
            "type": "number",
            "example": 6,
            "description": "Numeric rank for sorting"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID if grade is center-specific"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateGradeLevelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Primary 6"
          },
          "description": {
            "type": "string",
            "example": "Final year of primary school"
          },
          "level": {
            "type": "number",
            "example": 6
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid"
          }
        }
      },
      "GradeLevelDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "grade-uuid",
            "description": "Grade level ID"
          },
          "name": {
            "type": "string",
            "example": "Primary 6",
            "description": "Name of the grade level"
          },
          "description": {
            "type": "string",
            "example": "Final year of primary school",
            "description": "Description of the grade level"
          },
          "level": {
            "type": "number",
            "example": 6,
            "description": "Numeric rank for sorting"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID if grade is center-specific"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Last update date"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "level",
          "centerId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AssignStudentDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "string",
            "example": "student-uuid",
            "description": "ID of the student to assign"
          }
        },
        "required": [
          "studentId"
        ]
      },
      "AssignGroupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "example": "group-uuid",
            "description": "ID of the group to assign"
          }
        },
        "required": [
          "groupId"
        ]
      },
      "AssignSubjectDto": {
        "type": "object",
        "properties": {
          "subjectId": {
            "type": "string",
            "example": "subject-uuid",
            "description": "ID of the subject to assign"
          }
        },
        "required": [
          "subjectId"
        ]
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Class 6A",
            "description": "Name of the group"
          },
          "description": {
            "type": "string",
            "example": "Primary 6 Section A"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid",
            "description": "Grade level ID"
          },
          "maxStudents": {
            "type": "number",
            "example": 30,
            "description": "Maximum number of students"
          }
        },
        "required": [
          "name",
          "centerId"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Class 6A"
          },
          "description": {
            "type": "string",
            "example": "Primary 6 Section A"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid"
          },
          "maxStudents": {
            "type": "number",
            "example": 30
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "GroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "group-uuid",
            "description": "Group ID"
          },
          "name": {
            "type": "string",
            "example": "Class 6A",
            "description": "Name of the group"
          },
          "description": {
            "type": "string",
            "example": "Primary 6 Section A",
            "description": "Description of the group"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid",
            "description": "Grade level ID"
          },
          "maxStudents": {
            "type": "number",
            "example": 30,
            "description": "Maximum number of students"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Whether the group is active"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Last update date"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "centerId",
          "gradeLevelId",
          "maxStudents",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "AssignTeacherDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "string",
            "example": "teacher-uuid",
            "description": "ID of the teacher to assign"
          }
        },
        "required": [
          "teacherId"
        ]
      },
      "CreateSubjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mathematics",
            "description": "Name of the subject"
          },
          "description": {
            "type": "string",
            "example": "Advanced mathematics for primary students"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid",
            "description": "Grade level ID"
          },
          "credits": {
            "type": "number",
            "example": 4,
            "description": "Number of credits"
          },
          "duration": {
            "type": "number",
            "example": 60,
            "description": "Duration in minutes"
          }
        },
        "required": [
          "name",
          "centerId"
        ]
      },
      "UpdateSubjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mathematics"
          },
          "description": {
            "type": "string",
            "example": "Advanced mathematics for primary students"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid"
          },
          "credits": {
            "type": "number",
            "example": 4
          },
          "duration": {
            "type": "number",
            "example": 60
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "SubjectDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "subject-uuid",
            "description": "Subject ID"
          },
          "name": {
            "type": "string",
            "example": "Mathematics",
            "description": "Name of the subject"
          },
          "description": {
            "type": "string",
            "example": "Advanced mathematics for primary students",
            "description": "Description of the subject"
          },
          "centerId": {
            "type": "string",
            "example": "center-uuid",
            "description": "Center ID"
          },
          "gradeLevelId": {
            "type": "string",
            "example": "grade-uuid",
            "description": "Grade level ID"
          },
          "credits": {
            "type": "number",
            "example": 4,
            "description": "Number of credits"
          },
          "duration": {
            "type": "number",
            "example": 60,
            "description": "Duration in minutes"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Whether the subject is active"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Creation date"
          },
          "updatedAt": {
            "type": "string",
            "example": "2024-07-17T12:34:56.789Z",
            "description": "Last update date"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "centerId",
          "gradeLevelId",
          "credits",
          "duration",
          "isActive",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateTeacherDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID of the teacher",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "biography": {
            "type": "string",
            "description": "Teacher biography",
            "example": "Experienced mathematics teacher with 10+ years of teaching experience in advanced calculus and algebra."
          },
          "experienceYears": {
            "type": "number",
            "description": "Years of teaching experience",
            "example": 10,
            "minimum": 0,
            "maximum": 50
          },
          "specialization": {
            "type": "string",
            "description": "Teacher specialization or subject area",
            "example": "Mathematics, Advanced Calculus, Linear Algebra"
          }
        },
        "required": [
          "userId"
        ]
      },
      "TeacherResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Teacher profile ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "User ID of the teacher",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "biography": {
            "type": "string",
            "description": "Teacher biography",
            "example": "Experienced mathematics teacher with 10+ years of teaching experience in advanced calculus and algebra."
          },
          "experienceYears": {
            "type": "number",
            "description": "Years of teaching experience",
            "example": 10
          },
          "specialization": {
            "type": "string",
            "description": "Teacher specialization or subject area",
            "example": "Mathematics, Advanced Calculus, Linear Algebra"
          },
          "profileViews": {
            "type": "number",
            "description": "Number of profile views",
            "example": 150
          },
          "rating": {
            "type": "number",
            "description": "Teacher rating (0-5)",
            "example": 4.5,
            "minimum": 0,
            "maximum": 5
          },
          "studentsCount": {
            "type": "number",
            "description": "Number of students taught",
            "example": 45
          },
          "centersCount": {
            "type": "number",
            "description": "Number of centers the teacher works at",
            "example": 2
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "example": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "John Doe",
              "email": "john.doe@example.com"
            }
          }
        },
        "required": [
          "id",
          "userId",
          "profileViews",
          "rating",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateTeacherDto": {
        "type": "object",
        "properties": {
          "biography": {
            "type": "string",
            "description": "Teacher biography",
            "example": "Experienced mathematics teacher with 10+ years of teaching experience in advanced calculus and algebra."
          },
          "experienceYears": {
            "type": "number",
            "description": "Years of teaching experience",
            "example": 10,
            "minimum": 0,
            "maximum": 50
          },
          "specialization": {
            "type": "string",
            "description": "Teacher specialization or subject area",
            "example": "Mathematics, Advanced Calculus, Linear Algebra"
          }
        }
      },
      "TeacherListResponseDto": {
        "type": "object",
        "properties": {
          "teachers": {
            "description": "List of teachers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeacherResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of teachers",
            "example": 25
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          }
        },
        "required": [
          "teachers",
          "total",
          "page",
          "limit"
        ]
      },
      "CreateStudentDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": "User ID for the student"
          },
          "teacherId": {
            "type": "string",
            "format": "uuid",
            "description": "Teacher ID if student belongs to a freelance teacher"
          },
          "centerId": {
            "type": "string",
            "format": "uuid",
            "description": "Center ID if student belongs to a center"
          },
          "grade": {
            "type": "string",
            "enum": [
              "PRIMARY_1",
              "PRIMARY_2",
              "PRIMARY_3",
              "PRIMARY_4",
              "PRIMARY_5",
              "PRIMARY_6",
              "SECONDARY_1",
              "SECONDARY_2",
              "SECONDARY_3",
              "SECONDARY_4",
              "SECONDARY_5",
              "OTHER"
            ],
            "description": "Student grade (enum)"
          },
          "level": {
            "type": "string",
            "description": "Academic level or curriculum (e.g. IGCSE, American, National)"
          },
          "guardianId": {
            "type": "string",
            "format": "uuid",
            "description": "Guardian ID if linked"
          },
          "performanceScore": {
            "type": "number",
            "description": "Performance score (float)"
          },
          "totalSessionsAttended": {
            "type": "number",
            "description": "Total sessions attended",
            "default": 0
          },
          "totalPayments": {
            "type": "number",
            "description": "Total payments (float)",
            "default": 0
          },
          "notes": {
            "type": "string",
            "description": "Notes about the student"
          }
        },
        "required": [
          "userId",
          "grade"
        ]
      },
      "StudentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "teacherId": {
            "type": "string"
          },
          "centerId": {
            "type": "string"
          },
          "grade": {
            "type": "string",
            "enum": [
              "PRIMARY_1",
              "PRIMARY_2",
              "PRIMARY_3",
              "PRIMARY_4",
              "PRIMARY_5",
              "PRIMARY_6",
              "SECONDARY_1",
              "SECONDARY_2",
              "SECONDARY_3",
              "SECONDARY_4",
              "SECONDARY_5",
              "OTHER"
            ]
          },
          "level": {
            "type": "string"
          },
          "guardianId": {
            "type": "string"
          },
          "performanceScore": {
            "type": "number"
          },
          "totalSessionsAttended": {
            "type": "number"
          },
          "totalPayments": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "type": "object"
          },
          "teacher": {
            "type": "object"
          },
          "center": {
            "type": "object"
          },
          "guardian": {
            "type": "object"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "userId",
          "grade",
          "totalSessionsAttended",
          "totalPayments",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateStudentDto": {
        "type": "object",
        "properties": {
          "teacherId": {
            "type": "string",
            "format": "uuid",
            "description": "Teacher ID if student belongs to a freelance teacher"
          },
          "centerId": {
            "type": "string",
            "format": "uuid",
            "description": "Center ID if student belongs to a center"
          },
          "grade": {
            "type": "string",
            "enum": [
              "PRIMARY_1",
              "PRIMARY_2",
              "PRIMARY_3",
              "PRIMARY_4",
              "PRIMARY_5",
              "PRIMARY_6",
              "SECONDARY_1",
              "SECONDARY_2",
              "SECONDARY_3",
              "SECONDARY_4",
              "SECONDARY_5",
              "OTHER"
            ],
            "description": "Student grade (enum)"
          },
          "level": {
            "type": "string",
            "description": "Academic level or curriculum (e.g. IGCSE, American, National)"
          },
          "guardianId": {
            "type": "string",
            "format": "uuid",
            "description": "Guardian ID if linked"
          },
          "performanceScore": {
            "type": "number",
            "description": "Performance score (float)"
          },
          "totalSessionsAttended": {
            "type": "number",
            "description": "Total sessions attended",
            "default": 0
          },
          "totalPayments": {
            "type": "number",
            "description": "Total payments (float)",
            "default": 0
          },
          "notes": {
            "type": "string",
            "description": "Notes about the student"
          }
        }
      },
      "CreateSessionDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Session title"
          },
          "description": {
            "type": "string",
            "description": "Session description"
          },
          "teacherId": {
            "type": "string",
            "description": "Teacher ID",
            "format": "uuid"
          },
          "centerId": {
            "type": "string",
            "description": "Center ID",
            "format": "uuid"
          },
          "groupId": {
            "type": "string",
            "description": "Group ID",
            "format": "uuid"
          },
          "subjectId": {
            "type": "string",
            "description": "Subject ID",
            "format": "uuid"
          },
          "grade": {
            "type": "string",
            "description": "Grade (if no group)"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Session end time",
            "format": "date-time"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule (e.g., weekly, iCal RRULE)"
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Is session cancelled",
            "default": false
          }
        },
        "required": [
          "title",
          "teacherId",
          "startTime",
          "endTime"
        ]
      },
      "SessionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "teacherId": {
            "type": "string"
          },
          "centerId": {
            "type": "string"
          },
          "groupId": {
            "type": "string"
          },
          "subjectId": {
            "type": "string"
          },
          "grade": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          },
          "recurrenceRule": {
            "type": "string"
          },
          "isCancelled": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "teacher": {
            "type": "object"
          },
          "center": {
            "type": "object"
          },
          "group": {
            "type": "object"
          },
          "subject": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "title",
          "teacherId",
          "startTime",
          "endTime",
          "isCancelled",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSessionDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Session title"
          },
          "description": {
            "type": "string",
            "description": "Session description"
          },
          "teacherId": {
            "type": "string",
            "description": "Teacher ID",
            "format": "uuid"
          },
          "centerId": {
            "type": "string",
            "description": "Center ID",
            "format": "uuid"
          },
          "groupId": {
            "type": "string",
            "description": "Group ID",
            "format": "uuid"
          },
          "subjectId": {
            "type": "string",
            "description": "Subject ID",
            "format": "uuid"
          },
          "grade": {
            "type": "string",
            "description": "Grade (if no group)"
          },
          "startTime": {
            "type": "string",
            "description": "Session start time",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "Session end time",
            "format": "date-time"
          },
          "recurrenceRule": {
            "type": "string",
            "description": "Recurrence rule (e.g., weekly, iCal RRULE)"
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Is session cancelled",
            "default": false
          }
        }
      },
      "AttendanceMarkDto": {
        "type": "object",
        "properties": {
          "studentId": {
            "type": "string",
            "example": "student-uuid",
            "description": "Student ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "PRESENT",
              "ABSENT",
              "LATE",
              "EXCUSED"
            ],
            "example": "PRESENT",
            "description": "Attendance status"
          },
          "note": {
            "type": "string",
            "example": "Late due to traffic",
            "maxLength": 255
          }
        },
        "required": [
          "studentId",
          "status"
        ]
      },
      "BulkMarkAttendanceDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "example": "session-uuid",
            "description": "Class session ID"
          },
          "attendances": {
            "description": "List of attendance marks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttendanceMarkDto"
            }
          },
          "markedById": {
            "type": "string",
            "example": "user-uuid",
            "description": "User marking attendance"
          }
        },
        "required": [
          "sessionId",
          "attendances",
          "markedById"
        ]
      },
      "EditAttendanceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "attendance-uuid",
            "description": "Attendance record ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "PRESENT",
              "ABSENT",
              "LATE",
              "EXCUSED"
            ],
            "example": "PRESENT",
            "description": "Attendance status"
          },
          "note": {
            "type": "string",
            "example": "Updated note",
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "status"
        ]
      }
    }
  }
}