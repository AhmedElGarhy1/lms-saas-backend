import {
  Entity,
  Column,
  ManyToOne,
  JoinColumn,
  Index,
  PrimaryGeneratedColumn,
  CreateDateColumn,
} from 'typeorm';
import { User } from '@/modules/user/entities/user.entity';
import { Center } from '@/modules/centers/entities/center.entity';

export enum ActivityType {
  // ===== AUTHENTICATION EVENTS =====
  USER_LOGIN = 'USER_LOGIN',
  USER_LOGIN_FAILED = 'USER_LOGIN_FAILED',
  USER_LOGOUT = 'USER_LOGOUT',
  USER_SIGNUP = 'USER_SIGNUP',
  PASSWORD_CHANGED = 'PASSWORD_CHANGED',
  PASSWORD_RESET_REQUESTED = 'PASSWORD_RESET_REQUESTED',
  PASSWORD_RESET_COMPLETED = 'PASSWORD_RESET_COMPLETED',
  EMAIL_VERIFIED = 'EMAIL_VERIFIED',

  // ===== 2FA EVENTS =====
  TWO_FA_SETUP_INITIATED = 'TWO_FA_SETUP_INITIATED',
  TWO_FA_ENABLED = 'TWO_FA_ENABLED',
  TWO_FA_DISABLED = 'TWO_FA_DISABLED',
  TWO_FA_VERIFICATION_FAILED = 'TWO_FA_VERIFICATION_FAILED',

  // ===== USER MANAGEMENT EVENTS =====
  USER_CREATED = 'USER_CREATED',
  USER_UPDATED = 'USER_UPDATED',
  USER_DELETED = 'USER_DELETED',
  USER_RESTORED = 'USER_RESTORED',
  USER_ACTIVATED = 'USER_ACTIVATED',
  USER_DEACTIVATED = 'USER_DEACTIVATED',
  USER_ACCESS_GRANTED = 'USER_ACCESS_GRANTED',
  USER_ACCESS_REVOKED = 'USER_ACCESS_REVOKED',
  USER_PASSWORD_CHANGED_BY_ADMIN = 'USER_PASSWORD_CHANGED_BY_ADMIN',

  // ===== CENTER MANAGEMENT EVENTS =====
  CENTER_CREATED = 'CENTER_CREATED',
  CENTER_UPDATED = 'CENTER_UPDATED',
  CENTER_DELETED = 'CENTER_DELETED',
  CENTER_RESTORED = 'CENTER_RESTORED',
  CENTER_ACCESS_GRANTED = 'CENTER_ACCESS_GRANTED',
  CENTER_ACCESS_REVOKED = 'CENTER_ACCESS_REVOKED',
  CENTER_ADMIN_ASSIGNED = 'CENTER_ADMIN_ASSIGNED',
  CENTER_ADMIN_REMOVED = 'CENTER_ADMIN_REMOVED',

  // ===== ROLE MANAGEMENT EVENTS =====
  ROLE_CREATED = 'ROLE_CREATED',
  ROLE_UPDATED = 'ROLE_UPDATED',
  ROLE_DELETED = 'ROLE_DELETED',
  ROLE_RESTORED = 'ROLE_RESTORED',
  ROLE_ASSIGNED = 'ROLE_ASSIGNED',
  ROLE_REMOVED = 'ROLE_REMOVED',
  ROLE_PERMISSIONS_UPDATED = 'ROLE_PERMISSIONS_UPDATED',
  ROLE_VALIDATION_FAILED = 'ROLE_VALIDATION_FAILED',
  ROLE_ASSIGNMENT_CONFLICT = 'ROLE_ASSIGNMENT_CONFLICT',

  // ===== PERMISSION & ACCESS CONTROL EVENTS =====
  PERMISSION_GRANTED = 'PERMISSION_GRANTED',
  PERMISSION_REVOKED = 'PERMISSION_REVOKED',
  PERMISSION_OVERRIDE_GRANTED = 'PERMISSION_OVERRIDE_GRANTED',
  PERMISSION_OVERRIDE_REVOKED = 'PERMISSION_OVERRIDE_REVOKED',
  ACCESS_CONTROL_VALIDATION_FAILED = 'ACCESS_CONTROL_VALIDATION_FAILED',
  SCOPE_ACCESS_ATTEMPTED = 'SCOPE_ACCESS_ATTEMPTED',
  PERMISSION_DENIED = 'PERMISSION_DENIED',
  ADMIN_ACCESS_ATTEMPTED = 'ADMIN_ACCESS_ATTEMPTED',

  // ===== DATA ACCESS EVENTS =====
  DATA_EXPORT_REQUESTED = 'DATA_EXPORT_REQUESTED',
  DATA_EXPORT_COMPLETED = 'DATA_EXPORT_COMPLETED',
  BULK_OPERATION_STARTED = 'BULK_OPERATION_STARTED',
  BULK_OPERATION_COMPLETED = 'BULK_OPERATION_COMPLETED',

  // ===== SECURITY EVENTS =====
  SUSPICIOUS_ACTIVITY_DETECTED = 'SUSPICIOUS_ACTIVITY_DETECTED',
  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',
  INVALID_TOKEN_USED = 'INVALID_TOKEN_USED',
  UNAUTHORIZED_ACCESS_ATTEMPTED = 'UNAUTHORIZED_ACCESS_ATTEMPTED',
  ACCOUNT_LOCKOUT = 'ACCOUNT_LOCKOUT',
  ACCOUNT_UNLOCKED = 'ACCOUNT_UNLOCKED',
  SESSION_EXPIRED = 'SESSION_EXPIRED',
  MULTIPLE_LOGIN_ATTEMPTS = 'MULTIPLE_LOGIN_ATTEMPTS',

  // ===== SYSTEM EVENTS =====
  SYSTEM_STARTUP = 'SYSTEM_STARTUP',
  SYSTEM_SHUTDOWN = 'SYSTEM_SHUTDOWN',
  DATABASE_BACKUP_STARTED = 'DATABASE_BACKUP_STARTED',
  DATABASE_BACKUP_COMPLETED = 'DATABASE_BACKUP_COMPLETED',
  SYSTEM_MAINTENANCE_MODE = 'SYSTEM_MAINTENANCE_MODE',
  SYSTEM_ERROR = 'SYSTEM_ERROR',

  // ===== LEGACY EVENTS (for backward compatibility) =====
  ACCESS_GRANTED = 'ACCESS_GRANTED',
  ACCESS_REVOKED = 'ACCESS_REVOKED',
  SYSTEM_EVENT = 'SYSTEM_EVENT',
}

@Entity('activity_logs')
@Index(['type'])
@Index(['actorId'])
@Index(['centerId'])
@Index(['createdAt'])
export class ActivityLog {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({
    type: 'enum',
    enum: ActivityType,
  })
  type: ActivityType;

  @Column({ type: 'text' })
  description: string;

  @Column({ type: 'jsonb', nullable: true })
  metadata: Record<string, any>;

  @Column({ type: 'uuid', nullable: true })
  actorId: string | null;

  @Column({ type: 'uuid', nullable: true })
  centerId: string | null;

  @Column({ type: 'varchar', length: 45, nullable: true })
  ipAddress: string;

  @Column({ type: 'text', nullable: true })
  userAgent: string;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'actorId' })
  actor: User;

  @ManyToOne(() => Center, { nullable: true })
  @JoinColumn({ name: 'centerId' })
  center: Center;

  @CreateDateColumn()
  createdAt: Date;
}
